local gravity = -20

local jump_takeoff_speed = 550

function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
	msg.post(".", "acquire_input_focus")
	self.moving = false
	self.speed = 0;
	self.faceRight = true
	self.current_anim = nil
	
	self.velocity = vmath.vector3(0, 0, 0)
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.velocity = vmath.vector3()
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)

	if not self.ground_contact then
		self.velocity = self.velocity + gravity
	end

	go.set_position(go.get_position() + self.velocity * dt)
	-- Add update code here
	-- Remove this function if not needed
	local pos = go.get_position()
	
	pos.x = pos.x + self.speed * dt
	
	anim = hash("idle")

	if self.speed ~= 0 then
		anim = hash("run")
	else
		anim = hash("idle")
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", {id = anim})
		self.current_anim = anim
	end
	
	go.set_position(pos)
	self.speed = 0;
	sprite.set_hflip("#sprite", self.faceRight == false)

	msg.post("/camera", "look_at", { position = pos })
	
	--local proj = vmath.dot(self.correction, normal)
	--local comp = (distance - proj) * normal
	--self.correction = self.correction + comp
	--go.set_position(go.get_position() + comp)

	self.correction = vmath.vector3()
	self.ground_contact = false	
	
end


local function handle_geometry_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
	local comp = (distance - proj) * normal
	self.correction = self.correction + comp
	go.set_position(go.get_position() + comp)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	proj = vmath.dot(self.velocity, normal)
	if proj < 0 then
		self.velocity = self.velocity - proj * normal
	end
end


function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	if message_id == hash("contact_point_response")then
		if message.group == hash("geometry") then
			handle_geometry_contact(self, message.normal, message.distance)
		end
	end
end


local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		--play_animation(self, anim_jump)
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed

	local speedInMove = 620;

	if action_id == hash("right") then
		self.speed = speedInMove
		self.faceRight =true
	elseif action_id == hash("left") then
		self.speed = -speedInMove
		--if self.faceRight then
		self.faceRight =false;
	elseif action_id == hash("jump") then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
